/**
 * Copyright 2014 IBM Corp. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

//require('./config/express')(app);

var express = require('express'),
  app = express(),
  request = require('request'),
  path = require('path'),
  bluemix = require('./config/bluemix'),
  validator = require('validator'),
  watson = require('watson-developer-cloud'),
  extend = require('util')._extend,
  fs = require('fs');

// Bootstrap application settings


var multer  =   require('multer');
var storage =   multer.diskStorage({
	  destination: function (req, file, callback) {
	    callback(null, './uploads');
	  },
	  filename: function (req, file, callback) {
	    callback(null, file.fieldname + '-' + Date.now());
	  }
	});
	var upload = multer({ storage : storage}).single('pic');


// if bluemix credentials exists, then override local
var credentials = extend({
  version: 'v1',
  username: '699b883d-39cf-477e-81ff-bba2ea1d34c7',
  password: 'yhGfmUGb3N6S'
}, bluemix.getServiceCreds('visual_recognition')); // VCAP_SERVICES

var credentialNLP = extend({
  version: 'v1',
  "username": "a089b5ae-3be0-4b73-b6e3-f67c9fb6e6f8",
   "password": "gl7roys4ug00"
}, bluemix.getServiceCreds('natural_language_classifier')); // VCAP_SERVICES

// Create the service wrapper
var visualRecognition = watson.visual_recognition(credentials);
var nlp = watson.natural_language_classifier(credentialNLP);

// render index page
app.get('/', function(req, res) {
  res.render('index');
});

app.post('/', function(req, res) {
	
	upload(req,res,function(err) {
        if(err) {
            return console.error("Error uploading file.");
        }
        console.log("File is uploaded");
    });
	

  // Classifiers are 0 = all or a json = {label_groups:['<classifier-name>']}
  var classifier = req.body.classifier || '0';  // All
  console.log('logging:', classifier);
  
 var body = req.body; 
  console.log('logging:', body);

var img = req.pic; 
  console.log('logging:', img);

var txt = req.body.first_name; 
  console.log('logging:', img);

  if (classifier !== '0') {
    classifier = JSON.stringify({label_groups:[classifier]});
  }
  
  console.log('Request: ', req);

  var imgFile;

  //if (req.files.image) {
if (img) {
    // file image
    imgFile = fs.createReadStream(img);
console.log('logging:', imgFile);

  } else if(req.body.url && validator.isURL(req.body.url)) {
    // web image
    imgFile = request(req.body.url.split('?')[0]);
  } else if (req.body.url && req.body.url.indexOf('images') === 0) {
    // local image
    imgFile = fs.createReadStream(path.join('public',req.body.url));
  } else {
    // malformed url
    return res.status(500).json({ error: 'Malformed URL' });
  }

  var formData = {
    labels_to_check: classifier,
    image_file: imgFile,
    text: txt
  };

  visualRecognition.recognize(formData, function(error, result) {
    if (error)
      return res.status(error.error ? error.error.code || 500 : 500).json({ error: error });
    else{
    	
    	//filterUserCreatedClassifier    	    
    	    console.log('testing' +result);
    	    var obj = {};
    	    for (var prop in result) {
    	        obj[prop] = result[prop];
    	        var abc = obj[prop]
    	        for (var subprop in abc) {
        	        obj[subprop] = abc[subprop];
        	        
        	        console.log(obj[subprop]);
        	    }
    	        //console.log(obj[prop]);
    	    }
    }
    	//$(document).getElementById("content").innerHTML='<object type="type/html" data="home.html" ></object>';
      //return res.json(result);
  });
  /*nlp.classify(formData, function(error, result) {
    if (error)
      return res.status(error.error ? error.error.code || 500 : 500).json({ error: error });
    else
      return res.json(result);
  });*/
});

function filterUserCreatedClassifier(result, classifier_ids) {
	  var ids = classifier_ids || [];
	  if (result && result.images) {
	    result.images.forEach(function(image) {
	      if (util.isArray(image.scores))
	        image.scores = image.scores.filter(function (score) {
	          // IBM's classifiers have the id = name
	          return (score.classifier_id === score.name) ||
	                 (ids.indexOf(score.classifier_id) !== -1);
	        });
	    });
	  }
	  return result;
	}

var port = process.env.VCAP_APP_PORT || 3000;
app.listen(port);
console.log('listening at:', port);

